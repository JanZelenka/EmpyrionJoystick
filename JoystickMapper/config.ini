; This is a configuration file for the AutoHotKey script that enables joystick control in Empyrion - Galactic Survival.
;
; Joystick Input Definitions
; These are always specified in the Input key of the definition where used.
; A joystick input definition consists of 3 parts:
; [Number]Joy[ControlId]
;
; Number - The number of the joystick in your system. If you have only 1 joystick, omit this value
; Joy - A hardcoded identifier, simply type it in.
; ControlId - Indicates the actual joystick control. X, Y, Z, R, U and V stands for axes, numbers from 1 to 32 stand for buttons.
; These all are actual values recognized by AutoHotkey( . With POV it's a bit more complicated, therefore this config simplifies things.
; Use HatUp, HatDown, HatRight and HatLeft as ControlId.
;
; Button Output Definitions
; These are always specified in the Input key of the definition where used.
; The value is exactly what AHK uses to send the key strokes - minus the curly brackets: https://www.autohotkey.com/docs/commands/Send.htm
; In case you wonder, mouse wheel is supported as well (WheelUp, WheelDown). It is the prefered output for any joystick button you want to
; use to rotate between teh items in the toolbar, because unlike regular keys it will fire repeatedly, allowing you to rotate through the whole
; toolbar.
; 
; If you are not sure which controls on your joysticks are which, I shamelessly suggest this Joystick tester script:
; https://www.autohotkey.com/boards/viewtopic.php?f=6&t=106003
;
; PROFILE SECTIONS
; You can define several profiles. Each profile requires a section with the following structure:
;[ProfileN] - N represents the Profile sequence. Start with 1 and consecutive definitions must follow an uninterupted integer sequence.
;
; Axis Maps
; They have to be numbered from 1. Once a missing number is encountered, the script stops loading the Axis Maps.
; Each item is a pointer to a Section defining the Axis Map.
;Axis1=PitchAxis
;Axis2=YawAxis
; ...
;
; Button Maps
; They have to be numbered from 1. Once a missing number is encountered, the script stops loading the Button Maps.
; Each item is a pointer to a Section defining the Button Map.
;Button1=Action1Button
;Button2=AutoRotateToggle
; ...

; BUTTON MAP SECTIONS
; Button maps are very straight-forward. Simply specify the Input and Output.
;[Action1Button]
;Input=1Joy1
;Output=LButton
;
; What follows are the settings I'm using for my T16000 HOTAS and Saitek Pedals.
; You will find here examples of all the possible conbinations of definitions.

[Main]
; The number of the Profile to load on startup
ActiveProfile=1

; The key for toggeling between profiles. Pressing it will cycle the Profiles based on the number of the section.
; If Profile1 is loaded, it loads Profile2 and so on. If the intended Profile is not found, it goes back to Profile1.
ProfileToggleKey=-

; Indicates the key use to turn the Throttle Axis input on/off.
; This makes the analog control more friendly - you don't have to center it to use menus or switch windows
ThrottleToggleKey=2Joy1

; Determins whether the script runs even when Empyrion - Galactic Survival window doesn't have focus.
; Useful for testing purposes.
; {true|false}
TestMode=1

; This is needed in case you are using the Speed Monitor. The script effectively monitors the speed gauge on the screen
; and modulates the key presses based on how well the intended speed is maintained.
ScreenResolutionX=1920
ScreenResolutionX=1080

[PitchAxis]
Input=3JoyY
Output=MouseY
Invert=0
SensitivityPercent=20
HasCenter=1
DeadZone=15

[YawAxis]
Input=1JoyR
Output=MouseX
Invert=0
SensitivityPercent=20
HasCenter=1
DeadZone=20

[ThrottleAxis]
Input=2JoyZ
Output=s w
RatioPercent=30
RatioOffsetPercent=50
DeadZone=10
MaxZone=5
EffectMonitor=SpeedGauge

[RollAxis]
Input=3JoyX
Output=q e
SensitivityPercent=20
HasCenter=1
DeadZone=15

[StrafeAxis]
Input=2JoyR
Output=a d
HasCenter=0
DeadZone=15

[Action1Button]
Input=3Joy1
Output=LButton

[AutoRotateToggle]
Input=3Joy2
Output=o

[JumpButton]
Input=2Joy4
Output=Space

[CrouchButton]
Input=2Joy5
Output=c

[PowerSwitchButton]
Input=2Joy3
Output=y

[ReloadButton]
Input=3Joy4
Output=r

[ToolbarLeft]
Input=3JoyHatLeft
Output=WheelDown

[ToolbarRight]
Input=3JoyHatRight
Output=WheelUp

[Profile1]
Axis1=PitchAxis
Axis2=YawAxis
Axis3=ThrottleAxis
Axis4=StrafeAxis
Button1=Action1Button
Button2=AutoRotateToggle
Button3=JumpButton
Button4=CrouchButton
Button5=PowerSwitchButton
Button6=ReloadButton
Button7=ToolbarLeft
Button8=ToolbarRight

[SpeedGauge]
; The following 3 keys define the position of teh Speed Gauge in percent if the resolution specified in the Main section
; If the interface scales up/down on different resolution the way I expect, you don't need to modify these values.
GaugePositionXPercent=77.292
GaugePositionBottomYPercent=68.519
GaugePositionTopYPercent=28.148
; The number of segments in the gauge. This is included only for the case Eleon changes this. Then no new release of this
; script is required.
SegmentCount=26
; The following 3 values are the RGB components of the gauge color. These work on my setup well.
SegmentRed=0
SegmentGreen=177
SegmentBlue=241
; This the tolerance for each RGB components. My testing showed consistently the 3 values above, so I believe
; SegmentColorVariation of 0 would do the job but I suspect it doesn't hurt to give the gauge a bit of a breathing space.
SegmentColorVariation=5
; The next 6 keys define the activator. The speed gauge monitor will be active only if the specified position has
; the specified color. For instance when flying the drone, there is no gauge so teh modulation would only mess things up.
ActivatorPositionXPercent=
ActivatorPositionYPercent=
ActivatorRed=0
ActivatorGreen=177
ActivatorBlue=241
ActivatorColorVariation=5


[Empyrion]
; These are settings that don't need modifying unless what they represent changes in the game itself.
; They are all commented out because the script has the defaults hardcoded.

; The name of the game window as published to AutoHotkey.
WindowName=Empyrion - Galactic Survival
